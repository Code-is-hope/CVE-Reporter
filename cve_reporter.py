import os
import requests
import json
import time
import logging


"""
This code snippet is a collection of functions that fetches CVE (Common Vulnerabilities and Exposures) details from the NVD (National Vulnerability Database) API, parses the output file to extract CVE details, extracts and prepares data from a file, generates an HTML report based on the extracted data, and saves the report to a file.

The functions in this code snippet are as follows:

1. fetch_cve_details(cve_id): Fetches CVE details from the NVD API with rate limiting support. It takes a CVE ID as input and returns the JSON response containing the CVE details.

2. parse_output_file(output_file): Parses the output file to extract CVE details. It takes the path to the output file as input and returns the extracted CVE details as a list.

3. extract_and_prepare_data(file_path): Extracts and prepares data from a file. It takes the path to the file as input, reads the file, and extracts relevant data such as CVE IDs, descriptions, CVSS scores, etc. It returns the extracted data in the form of detailed_data (a list of dictionaries containing CVE details), severity_counts (a dictionary containing the count of CVEs for each severity level), average_scores (a dictionary containing the average CVSS scores for each severity level), and attack_vectors (a dictionary containing the count and average CVSS scores for each attack vector).

4. generate_html_report(detailed_data, severity_counts, average_scores, attack_vectors): Generates an HTML report based on the extracted data. It takes the detailed_data, severity_counts, average_scores, and attack_vectors as input and generates an HTML report with tables displaying the count and average CVSS scores for each severity level and attack vector, as well as detailed information about each CVE. It returns the generated HTML report as a string.

The code snippet also includes a main block that reads input CVE IDs from a file, fetches the CVE details for each ID, saves the details to an output file, parses the output file to extract the details, processes the extracted data, generates an HTML report, and saves the report to a file.

Note: The code snippet assumes the existence of input.txt (containing the CVE IDs), output.txt (to save the fetched CVE details), and cve_report.html (to save the generated HTML report). It also uses the logging module for logging debug, warning, and error messages.
"""

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def fetch_cve_details(cve_id):
    """Fetch CVE details from NVD API with rate limiting support."""
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    headers = {"API_KEY": os.environ.get('NVD_API_KEY')}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raises HTTPError for bad responses
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        if response.status_code == 403:
            logger.warning("Rate limited. Waiting before retrying...")
            time.sleep(24)
            return fetch_cve_details(cve_id)
        else:
            logger.error(f"HTTP error occurred: {http_err}")
    except Exception as err:
        logger.error(f"An error occurred: {err}")
    return None

def parse_output_file(output_file):
    """Parse the output.txt file to extract CVE details."""
    try:
        with open(output_file, 'r') as file:
            return json.load(file)
    except Exception as e:
        logger.error(f"Failed to parse output file: {e}")
    return []

def extract_and_prepare_data(file_path):
    with open(file_path, 'r') as file:
        cve_data = json.load(file)

    detailed_data = []
    severity_scores = {'CRITICAL': [], 'HIGH': [], 'MEDIUM': [], 'LOW': [], 'UNKNOWN': []}
    attack_vectors = {}

    for entry in cve_data:
        if entry:
            for vulnerability in entry.get('vulnerabilities', []):
                cve = vulnerability.get('cve', {})
                descriptions = cve.get('descriptions', [])
                metrics_v3 = cve.get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {})
                references = cve.get('references', [])
                
                description = next((d['value'] for d in descriptions if d.get('lang') == 'en'), descriptions[0].get('value') if descriptions else "Description not available")
                reference_url = references[0].get('url') if references else "Reference not available"
                
                detailed_data.append({
                    'id': cve.get('id', 'N/A'),
                    'description': description,
                    'cvss': metrics_v3,
                    'reference': reference_url
                })
                
                severity = metrics_v3.get('baseSeverity', 'UNKNOWN')
                base_score = metrics_v3.get('baseScore', 0)
                severity_scores[severity].append(base_score)
                
                attack_vector = metrics_v3.get('attackVector', 'UNKNOWN').replace('_', ' ')
                attack_vectors.setdefault(attack_vector, {'count': 0, 'scores': []})
                attack_vectors[attack_vector]['count'] += 1
                attack_vectors[attack_vector]['scores'].append(base_score)

     # Enhanced to include counts
    severity_counts = {severity: len(scores) for severity, scores in severity_scores.items()}
    
    # Existing calculation for average scores
    average_scores = {severity: sum(scores) / len(scores) if scores else 0 for severity, scores in severity_scores.items()}
    
    # Calculate average score per attack vector
    for vector in attack_vectors:
        scores = attack_vectors[vector]['scores']
        attack_vectors[vector]['average'] = sum(scores) / len(scores) if scores else 0

    return detailed_data, severity_counts, average_scores, attack_vectors

def generate_html_report(detailed_data, severity_counts, average_scores, attack_vectors):
    html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simtech - CVE Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1, h2 { color: navy; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }
        th { background-color: #f2f2f2; }
        a { text-decoration: none; color: blue; }
    </style>
</head>
<body>
    <h1>Simtech Consulting - CVE Report Overview</h1>
    <table>
        <tr>
            <th>Severity Level</th>
            <th>Count</th>
            <th>Average Score</th>
        </tr>"""
    
    for severity, count in severity_counts.items():
        avg_score = average_scores[severity]
        html_content += f"<tr><td>{severity}</td><td>{count}</td><td>{avg_score:.2f}</td></tr>"
    
    html_content += """
    </table>
    <br>
    <table>
        <tr>
            <th>Attack Vector</th>
            <th>Count</th>
            <th>Average Score</th>
        </tr>"""
    
    for vector, details in attack_vectors.items():
        html_content += f"<tr><td>{vector}</td><td>{details['count']}</td><td>{details['average']:.2f}</td></tr>"
    
    html_content += """
    </table>
    <h2>Detailed CVEs</h2>
    <ul>"""
    
    for i, item in enumerate(detailed_data, 1):
        html_content += f"<li><a href='#cve_{i}'>{item['id']}</a>: {item['description'][:60]}... ({item['cvss'].get('baseSeverity', 'N/A')})</li>"
    
    html_content += "</ul>"
    
    for i, item in enumerate(detailed_data, 1):
        html_content += f"""
        <h3 id='cve_{i}'><a href='https://nvd.nist.gov/vuln/detail/{item['id']}' target='_blank'>{item['id']}</a> ({item['cvss'].get('baseSeverity', 'N/A')})</h3>
        <p>{item['description']}</p>
        <p>Reference: <a href='{item['reference']}' target='_blank'>{item['reference']}</a></p>
        <table>
            <tr><th>Metric</th><th>Value</th></tr>"""
        
        for key, value in item['cvss'].items():
            html_content += f"<tr><td>{key}</td><td>{value}</td></tr>"
        
        html_content += "</table><br>"
    
    html_content += "</body></html>"
    
    return html_content

if __name__ == "__main__":
    # Read input file containing CVE IDs
    with open('input.txt', 'r') as input_file:
        cve_ids = input_file.read().splitlines()

    # Fetch details for each CVE ID and save them
    cve_responses = [fetch_cve_details(cve_id) for cve_id in cve_ids if cve_id]
    with open('output.txt', 'w') as output_file:
        json.dump(cve_responses, output_file, indent=4)

    # Parse the saved CVE responses to extract details
    cve_details = parse_output_file('output.txt')

    file_path = './output.txt'
    html_report_path = './Simtech_cve_report_enhanced.html'

    # Process and generate the report
    detailed_data, severity_counts, average_scores, attack_vectors = extract_and_prepare_data(file_path)
    html_report = generate_html_report(detailed_data, severity_counts, average_scores, attack_vectors)

    # Save the report
    with open(html_report_path, 'w') as file:
        file.write(html_report)


    logger.info("Report generated successfully.")
